{"version":3,"sources":["components/addCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","items","type","value","onChange","console","log","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","item","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAc,SAACS,GACX,MAAM,CAAEP,GAAR,mBAAuBO,QAM/B,SACI,uBAAOC,KAAK,OAAOC,MAAOT,EAAYU,SAjBpB,SAACP,GACvBQ,QAAQC,IAAIT,EAAEU,OAAOJ,OACrBR,EAAcE,EAAEU,OAAOJ,a,QCPlBK,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAGrC,OAFAN,QAAQC,IAAIG,EAAIC,EAAOC,GAGnB,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCRHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAEIG,MAAMR,GAFV,cAEbS,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAU,IAAD,EAC5B,MAAO,CACHhB,GAAIgB,EAAKhB,GACTC,MAAOe,EAAKf,MACZC,IAAG,UAAEc,EAAKC,cAAP,aAAE,EAAaC,iBAAiBhB,QAI3CN,QAAQC,IAAIiB,GAbO,kBAcZA,GAdY,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EACZvB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OAVAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAK,SAACV,GACHQ,EAAS,CACLT,KAAMC,EACNM,SAAS,SAGtB,CAACb,IAEGc,EDd2BI,CAAalB,GAAjCU,EAFuB,EAE7BJ,KAAcO,EAFe,EAEfA,QAEtB,OACI,eAAC,WAAD,WACI,6BAAKb,IACJa,GAAW,mBAAGjB,UAAU,mCAAb,yBACZ,qBAAKA,UAAU,YAAf,SAEQc,EAAOF,KAAI,SAACW,GACR,OAAO,cAAC,EAAD,eAAgCA,GAAdA,EAAM1B,aEQxC2B,EAlBM,WAAO,IAAD,EACa3C,mBAAS,IADtB,mBAChB4C,EADgB,KACJ7C,EADI,KAIvB,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACK6C,EAAWb,KAAI,SAACR,GACb,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCXzCsB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.85591194.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n//Aqui recibimos las (props) de AddCategory \nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState(\"\");\n\n    const handleInputChange = (e) => {\n        console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories((items) => {\n                return [inputValue, ...items];\n            });\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n        </form>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}\n","import React from \"react\";\n\nexport const GifGridItem = ({ id, title, url }) => {\n    console.log(id, title, url);\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\" >\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    );\n};\n\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Aas18HR8N29Q9KlNtvdUg8HHSl52CYGY`;\n    const response = await fetch(url);\n    const { data } = await response.json();\n\n    const gifs = data.map((item) => {\n        return {\n            id: item.id,\n            title: item.title,\n            url: item.images?.downsized_medium.url,\n        }\n    });\n\n    console.log(gifs);\n    return gifs;\n};","import React, { Fragment } from \"react\";\nimport { GifGridItem } from \"./GifGridItem\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n\n    return (\n        <Fragment>\n            <h3>{category}</h3>\n            {loading && <p className=\"animate__animated animate__flash\">Loading ...</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map((image) => {\n                        return <GifGridItem key={image.id} {...image} />\n                    })\n                }\n            </div>\n        </Fragment>\n    );\n};","import { useEffect, useState } from \"react\"\n\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then((gifs) => {\n                setState({\n                    data: gifs,\n                    loading: false,\n                });\n            });\n    }, [category]);\n\n    return state; //{data: [], loading: true}\n}","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/addCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\n\nconst GifExpertApp = () => {\n    const [categories, setCategories] = useState([]);\n\n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            <ol>\n                {categories.map((category) => {\n                    return <GifGrid key={category} category={category} />\n                })}\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}